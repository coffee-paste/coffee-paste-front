'use strict'

import nodeFetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import jszip from 'jszip';


//#region Commons
// Build API based on develop branch, unless it's build for main branch, then use main branch API.
const ENV_BRANCH  = process.env.GITHUB_REF !== 'main' ? 'develop' : 'main';
const SELF_NAME = 'generate-api.js';
const NODE_BUFFER = 'nodebuffer';
//#endregion Commons


//#region Swagger File Names
const CUSTOM_D_TS = 'custom.d.ts';
const CONFIGURATION_TS = 'configuration.ts';
const API_TS = 'api.ts';
const INDEX_TS = 'index.ts';
//#endregion Swagger File Names


//#region Output Paths
const OUTPUT_BASE_PATH = 'src/infrastructure/generated'
const SWAGGER_API_OUTPUT_PATH = `${OUTPUT_BASE_PATH}/api`;
const PROXY_EMISSION_OUTPUT_FILE = `${OUTPUT_BASE_PATH}/proxies/api-proxies.ts`
//#endregion Output Paths


//#region Re-writes
const PORTABLE_FETCH_REGEX = /import.+portable\-fetch\.*?\"\.*?\;/;
const PORTABLE_FETCH_REWRITE_CONTENT = 'const portableFetch = fetch;'

const BASE_PATH_REGEX = /const\s+BASE_PATH\s+=\s+.+?\;/;
const BASE_PATH_REWRITE_CONTENT = `// Auto-generated by '${SELF_NAME}'\n\
import { envFacade } from '../../env-facade';\n\
const BASE_PATH = envFacade.apiUrl;`;

const CLASS_DEFS_REGEX = /export[\t ]+class\s+(?<className>[\w\d]+)\s+extends\s+BaseAPI/g;

const INJECT_PARAMS_FIND_REGEX = /delete.+?localVarUrlObj\.search\s*?;.*?\n/g
const INJECT_PARAMS_FIND_CONTENT = "\
delete localVarUrlObj.search;\n\
			localVarRequestOptions.credentials = 'include';\n\
";
//#endregion Re-writes


//#region Proxies File

const AUTO_GEN_COMMENT = `\n// This file was AutoGenerated at ${new Date()} by '${SELF_NAME}'\n\n`

const PROXY_CORE_IMPORT_STATEMENT = "import { createApiProxy } from '@/infrastructure/api-proxy-core';\n";

const CRED_MGR_IMPORT_STATEMENT = "import { credentialsManager } from '@/infrastructure/session-management/credential-manager';\n";

const FACADE_CLASS_START_STATEMENT = '\n\nexport class ApiFacade {\n';
const FACADE_CLASS_END_STATEMENT = '}\n';

const PROXY_GETTER_STATEMENT_FORMAT = "\
	public static get {0}(): {0} {\n\
		return createApiProxy(new {0}({ apiKey: credentialsManager.getToken() }));\n\
	}\n\n"

//#endregion Proxies File


function mkdirRecursive(dirPath) {
	if (fs.existsSync(dirPath)) { 
		return true 
	}
	const dirname = path.dirname(dirPath)
	mkdirRecursive(dirname);
	fs.mkdirSync(dirPath);
}

async function depositFile(jsZip, fileName) {
	const fileBuffer = await jsZip.file(fileName).async(NODE_BUFFER);
	fs.writeFileSync(path.join(SWAGGER_API_OUTPUT_PATH, fileName), fileBuffer);
}

function createImportStatement(importNames) {
	return `import { ${importNames.join(', ')} } from '../api/api'`;
}

async function createApiTs(jsZip) {
	let fileContents = (await jsZip.file(API_TS).async(NODE_BUFFER)).toString();
	fileContents = fileContents.replace(PORTABLE_FETCH_REGEX, PORTABLE_FETCH_REWRITE_CONTENT);
	fileContents = fileContents.replace(BASE_PATH_REGEX, BASE_PATH_REWRITE_CONTENT);
	fileContents = fileContents.replace(INJECT_PARAMS_FIND_REGEX, INJECT_PARAMS_FIND_CONTENT);
	fs.writeFileSync(path.join(SWAGGER_API_OUTPUT_PATH, API_TS), fileContents);

	const apiClasses = fileContents.matchAll(CLASS_DEFS_REGEX);
	const proxiesToEmit = Array.from(apiClasses).map(match => match.groups['className']);
	return proxiesToEmit;
}

function emitProxiesFile(proxiesToEmit) {
	if (fs.existsSync(PROXY_EMISSION_OUTPUT_FILE)) {
		fs.unlinkSync(PROXY_EMISSION_OUTPUT_FILE);
	}

	// Emit static imports
	fs.appendFileSync(PROXY_EMISSION_OUTPUT_FILE, AUTO_GEN_COMMENT);
	fs.appendFileSync(PROXY_EMISSION_OUTPUT_FILE, PROXY_CORE_IMPORT_STATEMENT);
	fs.appendFileSync(PROXY_EMISSION_OUTPUT_FILE, CRED_MGR_IMPORT_STATEMENT);

	// Emit dynamic imports (all classes from the Swagger generated code)
	const importStatement = createImportStatement(proxiesToEmit);
	fs.appendFileSync(PROXY_EMISSION_OUTPUT_FILE, importStatement);

	// Emit the Facade class's beginning
	fs.appendFileSync(PROXY_EMISSION_OUTPUT_FILE, FACADE_CLASS_START_STATEMENT);

	// Emit the facade class's accessors
	for (const proxyToEmit of proxiesToEmit) {
		fs.appendFileSync(PROXY_EMISSION_OUTPUT_FILE, PROXY_GETTER_STATEMENT_FORMAT.replace(/\{0\}/g, proxyToEmit))
	}

	// Emit the facade class's end
	fs.appendFileSync(PROXY_EMISSION_OUTPUT_FILE, FACADE_CLASS_END_STATEMENT);
}

(async () => {

    // 1: fetch last swagger spec

    const body = {
        "lang": "typescript-fetch",
        "specURL": `https://raw.githubusercontent.com/coffee-paste/coffee-paste-backend/${ENV_BRANCH}/src/swagger.json`,
        "type": "CLIENT",
        "codegenVersion": "V3",
        "options": {
			supportsES6: true,	
        }
    }

    const generateClient = {
        method: 'POST',
        body: JSON.stringify(body),
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/octet-stream' },
    };

    const genResponse = await nodeFetch('https://generator3.swagger.io/api/generate', generateClient);
    const buffer = await genResponse.buffer();

    // 2: Extract generated API
    const generatedZip = await jszip.loadAsync(buffer);

	mkdirRecursive(SWAGGER_API_OUTPUT_PATH);
	await depositFile(generatedZip, CONFIGURATION_TS);
	await depositFile(generatedZip, CUSTOM_D_TS);
	await depositFile(generatedZip, INDEX_TS);
	const apiClassNames = await createApiTs(generatedZip);
	emitProxiesFile(apiClassNames);
    
    // TODO: Replace portableFetch with fetch.

    // TOTO: Set BASE_PATH to be envFacade.apiUrl

    // TODO: Add localVarRequestOptions.credentials = 'include'; to all requests in generated api.ts file.

    // TODO: Add localVarRequestOptions.credentials = 'include'; to all requests in generated api.ts file.

})();
